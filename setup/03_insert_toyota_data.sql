USE ROLE ACCOUNTADMIN;

// Raw Collision Events
USE SCHEMA DEV_SOURCE_DB.CCD_SCH;
CREATE OR REPLACE ICEBERG TABLE COLLISION_RAW_EVENT (
    COLLISION_ID STRING,
    VIN STRING,
    DEVICE_ID LONG,
    UPLOAD_TS TIMESTAMP,
    BLOCK_NAME STRING,
    TS TIMESTAMP,
    CAN_ID STRING,
    CAN_DATA STRING,
    CAN_DATA_LENGTH INTEGER,
    CAN_MILLISEC INTEGER,
    CAN_RESERVED INTEGER
)
CATALOG = 'SNOWFLAKE'
EXTERNAL_VOLUME = 'iceberg_external_volume'
BASE_LOCATION = 'dev_source_db';

COPY INTO "DEV_SOURCE_DB"."CCD_SCH"."COLLISION_RAW_EVENT"
FROM (
    SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
    FROM '@"TOYOTA"."ADMIN"."SETUP_STAGE"'
)
FILES = ('collision_raw_event.csv')
FILE_FORMAT = (
    TYPE=CSV,
    SKIP_HEADER=1,
    FIELD_DELIMITER=',',
    TRIM_SPACE=TRUE,
    FIELD_OPTIONALLY_ENCLOSED_BY='"',
    REPLACE_INVALID_CHARACTERS=TRUE,
    DATE_FORMAT=AUTO,
    TIME_FORMAT=AUTO,
    TIMESTAMP_FORMAT=AUTO
)
ON_ERROR=CONTINUE;

// Customer Consent Data
USE SCHEMA DEV_SOURCE_DB.CON_SCH;
CREATE OR REPLACE TABLE CONSENT (
    ID STRING,
    VIN STRING,
    UUID STRING,
    CONSENT_SOURCE STRING,
    ENTRY_CREATED_DATE TIMESTAMP,
    ENTRY_LAST_UPDATED_DATE TIMESTAMP,
    PURPOSE_NAME STRING,
    PURPOSE_STATUS STRING,
    PURPOSE_CUSTOM_PREFERENCES STRING,
    PURPOSE_TYPES STRING,
    PURPOSE_CONSENT_WITHDRAWAL_DATE TIMESTAMP,
    PURPOSE_CONSENT_DATE TIMESTAMP,
    PURPOSE_LAST_UPDATED_DATE TIMESTAMP,
    PURPOSE_LAST_INTERACTION_DATE TIMESTAMP
);

COPY INTO "DEV_SOURCE_DB"."CON_SCH"."CONSENT"
FROM (
    SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
    FROM '@"TOYOTA"."ADMIN"."SETUP_STAGE"'
)
FILES = ('consent.csv')
FILE_FORMAT = (
    TYPE=CSV,
    SKIP_HEADER=1,
    FIELD_DELIMITER=',',
    TRIM_SPACE=TRUE,
    FIELD_OPTIONALLY_ENCLOSED_BY='"',
    REPLACE_INVALID_CHARACTERS=TRUE,
    DATE_FORMAT=AUTO,
    TIME_FORMAT=AUTO,
    TIMESTAMP_FORMAT=AUTO
)
ON_ERROR=CONTINUE;

// ECare Warning Data
USE SCHEMA DEV_SOURCE_DB.CCD_SCH;
CREATE OR REPLACE ICEBERG TABLE ECARE_WARNING (
    _ID STRING,
    COUNTRYCODE STRING,
    VIN STRING,
    WARNING_WARNINGLIGHTTYPE_CODE INTEGER,
    WARNING_WARNINGLIGHTTYPE_DESCRIPTION STRING,
    WARNING_WARNINGLIGHTTYPE_SYMBOL STRING,
    WARNING_WARNINGLIGHTTYPE_PRIORITY INTEGER,
    WARNING_TIMESTAMP TIMESTAMP,
    WARNING_MILEAGE_VALUE INTEGER,
    WARNING_MILEAGE_UNIT STRING,
    PRIORITY STRING
)
CATALOG = 'SNOWFLAKE'
EXTERNAL_VOLUME = 'iceberg_external_volume'
BASE_LOCATION = 'dev_source_db';

COPY INTO "DEV_SOURCE_DB"."CCD_SCH"."ECARE_WARNING"
FROM (
    SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
    FROM '@"TOYOTA"."ADMIN"."SETUP_STAGE"'
)
FILES = ('ecare_warning.csv')
FILE_FORMAT = (
    TYPE=CSV,
    SKIP_HEADER=1,
    FIELD_DELIMITER=',',
    TRIM_SPACE=TRUE,
    FIELD_OPTIONALLY_ENCLOSED_BY='"',
    REPLACE_INVALID_CHARACTERS=TRUE,
    DATE_FORMAT=AUTO,
    TIME_FORMAT=AUTO,
    TIMESTAMP_FORMAT=AUTO
)
ON_ERROR=CONTINUE;

// Computed Collision Data
USE SCHEMA DEV_SOURCE_DB.CCD_SCH;
CREATE OR REPLACE ICEBERG TABLE COLLISION (
    VIN STRING,
    ALERT_ID STRING,
    COLLISION_SPEED INTEGER,
    DATA_RECEIVED_TIMESTAMP TIMESTAMP,
    RECORDED_AT_TIMESTAMP TIMESTAMP,
    DEALER STRING,
    DELTA_SPEED DOUBLE,
    EVENT_TYPE STRING,
    IMPACT_DIRECTION STRING,
    LOCATIONS STRING,
    DRIVER_BEHAVIOUR STRING,
    PEEK_ACCELERATION DOUBLE,
    SEVERITY INTEGER,
    STATUS STRING
)
CATALOG = 'SNOWFLAKE'
EXTERNAL_VOLUME = 'iceberg_external_volume'
BASE_LOCATION = 'dev_source_db';

COPY INTO "DEV_SOURCE_DB"."CCD_SCH"."COLLISION"
FROM (
    SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
    FROM '@"TOYOTA"."ADMIN"."SETUP_STAGE"'
)
FILES = ('collision.csv')
FILE_FORMAT = (
    TYPE=CSV,
    SKIP_HEADER=1,
    FIELD_DELIMITER=',',
    TRIM_SPACE=TRUE,
    FIELD_OPTIONALLY_ENCLOSED_BY='"',
    REPLACE_INVALID_CHARACTERS=TRUE,
    DATE_FORMAT=AUTO,
    TIME_FORMAT=AUTO,
    TIMESTAMP_FORMAT=AUTO
)
ON_ERROR=CONTINUE;

// create views in DEV_RND_DB.STAGE_SCH
CREATE VIEW DEV_RND_DB.STAGE_SCH.CONSENT AS SELECT * FROM DEV_SOURCE_DB.CON_SCH.CONSENT;
CREATE VIEW DEV_RND_DB.STAGE_SCH.COLLISION AS SELECT * FROM DEV_SOURCE_DB.CCD_SCH.COLLISION;
CREATE VIEW DEV_RND_DB.STAGE_SCH.COLLISION_RAW_EVENT AS SELECT * FROM DEV_SOURCE_DB.CCD_SCH.COLLISION_RAW_EVENT;
CREATE VIEW DEV_RND_DB.STAGE_SCH.ECARE_WARNING AS SELECT * FROM DEV_SOURCE_DB.CCD_SCH.ECARE_WARNING;

// create views in DEV_QUALITY_DB.STAGE_SCH
CREATE VIEW DEV_QUALITY_DB.STAGE_SCH.CONSENT AS SELECT * FROM DEV_SOURCE_DB.CON_SCH.CONSENT;
CREATE VIEW DEV_QUALITY_DB.STAGE_SCH.ECARE_WARNING AS SELECT * FROM DEV_SOURCE_DB.CCD_SCH.ECARE_WARNING;

// materialized views
CREATE MATERIALIZED VIEW DEV_RND_DB.CURATED_SCH.COLLISION AS SELECT * FROM DEV_SOURCE_DB.CCD_SCH.COLLISION;
CREATE MATERIALIZED VIEW DEV_RND_DB.CRASHDET_SCH.COLLISION AS SELECT * FROM DEV_SOURCE_DB.CCD_SCH.COLLISION;
CREATE MATERIALIZED VIEW DEV_QUALITY_DB.CURATED_SCH.ECARE_WARNING AS SELECT * FROM DEV_SOURCE_DB.CCD_SCH.ECARE_WARNING;
CREATE MATERIALIZED VIEW DEV_QUALITY_DB.EDER_SCH.ECARE_WARNING AS SELECT * FROM DEV_SOURCE_DB.CCD_SCH.ECARE_WARNING;